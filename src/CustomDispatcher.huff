// Custom Jumptable
// every 2-byte entry represents a program counter location for the selected function:
// 0x 002C 0033 0002 0003 0004 0005 0006 0007 0008 0009 000A 000B 000C 000D 000E 000F
// 002C : jumpdest of the first function (__EXAMPLE_FUNCTION_1 as defined below)
// 0033 : jumpdest of the second function (__EXAMPLE_FUNCTION_2 as defined below)
// 0002 : jumpdest of the third function, and so on.
#define constant _JUMPTABLE = 0x002C003300020003000400050006000700080009000A000B000C000D000E000F


// Define some demo functions for testing purposes
#define function __EXAMPLE_FUNCTION_1() pure returns ()
#define function __EXAMPLE_FUNCTION_2() pure returns ()


// example calldata to provide: 0xF0 (=240 bits =30 bytes)
// in this case: 
// 0x002C003300020003000400050006000700080009000A000B000C000D000E000F   original jumptable
// 0x000000000000000000000000000000000000000000000000000000000000002C   shitfted by 30 bytes to the right
// result:  0x2C
// mask:    0xFFFF
// AND:     0x2C -> 0x2C is the jumpdest PC value of __EXAMPLE_FUNCTION_1 -> make jump
#define macro MAIN() = takes (0) returns (0) {
  // load the jump table on the stack as we need to read from it later
  [_JUMPTABLE]                         //   [_JUMPTABLE]

  // load first 32 bytes of calldata on the stack
  0x00 calldataload                    //   [calldata, _JUMPTABLE]
  
  // take the first byte of calldata
  0x00 byte                            //   [calldata first byte, _JUMPTABLE]
  
  // shift the jump table right by [calldata first byte] bytes 
  // 0x002C003300020003000400050006000700080009000A000B000C000D000E000F  original jumptable
  // 0x000000000000000000000000000000000000000000000000000000000000002C  shitfted jumptable
  shr                                  //   [jumptable shifted]

  // mask the shifted result with 0xFFFF (2-bytes mask)
  // 0x000000000000000000000000000000000000000000000000000000000000FFFF
  // 0x000000000000000000000000000000000000000000000000000000000000002C
  // AND operation will result in:
  // 0x000000000000000000000000000000000000000000000000000000000000002C
  // which is the jumpdest PC value of __EXAMPLE_FUNCTION_1
  0xFFFF and                           //   [jumptable entry]

  // go to the jumpdest associated with the value on the stack
  // it will fail and revert if jumpdest is not valid
  jump                                 //   []

  // now call all the functions so they are included in the binary
  // and from here we can figure out the PC of each function's beginning
  __EXAMPLE_FUNCTION_1()
  __EXAMPLE_FUNCTION_2()
}


// ---------- demo functions ---------------


#define macro __EXAMPLE_FUNCTION_1() = takes (0) returns (0) {
  jumpdest              // PC: 0x2d
  0x20 0x00 mstore      // Return "Hello, world"
  0x0d 0x20 mstore
  __RIGHTPAD(0x48656c6c6f2c20776f726c6421) 0x40 mstore
  0x60 0x00 return
}

#define macro __EXAMPLE_FUNCTION_2() = takes (0) returns (0) {
  jumpdest             // PC: 0x33
  0x00 0x00 eq
  stop
}